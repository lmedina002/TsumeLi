;;;; Program to solve tsume in n-turn
(load  "e:/Mes docs/Documents/Mes documents/Cours/ENSC/2A/PII/TsumeLi/rules.lisp") ;Desktop path
(load  "e:/Mes docs/Documents/Mes documents/Cours/ENSC/2A/PII/TsumeLi/interactions.lisp")

;;Evaluation of a board configuration
(defun value-enemy-piece (piece)
  (let ((result 0))
    (cond ((string-equal piece "-P") (setq result (+ result 1)))
	  ((string-equal piece "-+P") (setq result (+ result 7)))
	  ((string-equal piece "-L") (setq result (+ result 3)))
	  ((string-equal piece "-N") (setq result (+ result 4)))
	  ((string-equal piece "-S") (setq result (+ result 5)))
	  ((or (string-equal piece "-G")
	       (string-equal piece "-+L")
	       (string-equal piece "-+N")
	       (string-equal piece "-+S"))
	   (setq result (+ result 6)))
	  ((string-equal piece "-B") (setq result (+ result 8)))
	  ((or (string-equal piece "-+B")
	       (string-equal piece "-R"))
	   (setq result (+ result 10)))
	  ((string-equal piece "-+R") (setq result (+ result 12))))
    (return-from value-enemy-piece result)))
  
(defun evaluation-enemy (board drops-enemy drops-ally)
  "Attribute a value to a board configuration"
  (let ((result 0))
    (when (mate board drops-ally)
      (return-from evaluation-enemy result))
    (dotimes (row 9 result)
      (dotimes (column 9 result)
	(let ((square (aref board row column)))
	  (when (string-equal (subseq square 0 1) "-")
	    (setq result (+ result (value-enemy-piece square)))))))
    (dolist (piece drops-enemy)
      (setq result (+ result (value-enemy-piece piece))))
    (return-from evaluation-enemy result)))

(defun value-ally-piece (piece)
  (let ((result 0))
    (cond ((string-equal piece "P") (setq result (+ result 1)))
	  ((string-equal piece "+P") (setq result (+ result 7)))
	  ((string-equal piece "L") (setq result (+ result 3)))
	  ((string-equal piece "N") (setq result (+ result 4)))
	  ((string-equal piece "S") (setq result (+ result 5)))
	  ((or (string-equal piece "G")
	       (string-equal piece "+L")
	       (string-equal piece "+N")
	       (string-equal piece "+S"))
	   (setq result (+ result 6)))
	  ((string-equal piece "B") (setq result (+ result 8)))
	  ((or (string-equal piece "+B")
	       (string-equal piece "R"))
	   (setq result (+ result 10)))
	  ((string-equal piece "+R") (setq result (+ result 12))))
    (return-from value-ally-piece result)))
  
(defun evaluation-ally (board drops-ally)
  "Attribute a value to a board configuration"
  (let ((result 0))
    (when (mate board drops-ally)
      (setq result (+ result 50)))
    (dotimes (row 9 result)
      (dotimes (column 9 result)
	(let ((square (aref board row column)))
	  (when (and (string-not-equal (subseq square 0 1) "-")
		     (string-not-equal square "_"))
	    (setq result (+ result (value-ally-piece square)))))))
    (dolist (piece drops-ally)
      (setq result (+ result (value-ally-piece piece))))
    (return-from evaluation-ally result)))
      
		  
